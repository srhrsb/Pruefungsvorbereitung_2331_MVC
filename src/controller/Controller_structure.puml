@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": false,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "controller.Controller",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_104069929 { 
   	label=model
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   License104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)License</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   licenseType: LicenseType [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   softwareName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   userId: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ License(clientID: int, softwareName: String, licenseType: LicenseType, userId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLicenseType(): LicenseType</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSoftwareName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUserId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLicenseType(licenseType: LicenseType)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setSoftwareName(softwareName: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUserId(userId: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

User104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)User</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   firstName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lastName: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ User(id: int, firstName: String, lastName: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFirstName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLastName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ setFirstName(firstName: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLastName(lastName: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_637428636 { 
   	label=controller
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Controller637428636[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Controller</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   licenseDB: LicenseDAO [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Controller(licenseDB: LicenseDAO)</TD></TR>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_67442 { 
   	label=DAO
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   LicenseDAO67442[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)LicenseDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   licenseList: List&lt;License&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   userList: List&lt;User&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ LicenseDAO()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addLicense(id: int, softwareName: String, type: LicenseType, userId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ addUser(id: int, firstName: String, lastName: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteUserById(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLicenseById(id: int): License</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUserById(id: int): User</TD></TR>
<TR><TD ALIGN="LEFT" >+ isLicenseIdUnique(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isUserIdUnique(id: int): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Controller637428636 -> LicenseDAO67442[label="licenseDB
[0..1]"];
LicenseDAO67442 -> License104069929[label="licenseList
[0..*]"];
LicenseDAO67442 -> User104069929[label="userList
[0..*]"];
    
}
@enduml